STL = ST STL .
STL = # .
ST = FST .
ST = WST .
ST = RUST .
ST = IFST .
ST = INCLUDEST .
ST = DCLST .
ST = ASSGN .
ST = SWITCH .
FST = for id @testid in range ( num @mov , num ) do  @for FORR @compfor .
FORR = { STL } .
FORR = ST .
WST = while ( @savepc @bottom be @jz ) do WSTT .
WSTT = { STL @jmpcompjmp } .
WSTT = ST @jmpcompjmp .
RUST = repeat RUSTT until ( @bottom be @jnz ) ; .
RUSTT = { @savepc STL } .
RUSTT = @savepc ST .
IFST = if ( @bottom be @jz ) do { STL } IFF .
IFF = # @compjmp .
IFF = else IFFF .
IFFF = do { @finaljmp @compjmplast STL @finalize } .
IFFF = if ( @compjmp @bottom be @jz ) do { STL } IFF .
INCLUDEST = include .
ASSGN = id ASSGNN := num @movs ; .
ASSGNN = # .
ASSGNN = [ num ] .
T = int .
T = float .
T = char .
DCLST = T IS id CHOOSE DCLSTT .
IS = # .
IS = * .
CHOOSE = # @ads .
CHOOSE = @outt ( XX ) CHOSE .
CHOSE = { STL return id ; @outfunc } .
CHOSE = # @has @outfunc .
XX = # .
XX = T @getin id XXX .
XXX = # .
XXX = , T @getin id XXX .
DCLSTT = ; @poptype .
DCLSTT = , IS id @ads CONT DCLSTT .
CONT = := num @move .
CONT = [ num @ad ] .
CONT = # .
SWITCH = switch ( id ) { @startswitch @saved case num @savenum : { STL  break ; @jmpout } CASE default : { @def STL @endswitch } @last } .
CASE = # .
CASE = @saved case num @savenum : { STL  break ; @jmpout } CASE .
~